{
  "_args": [
    [
      {
        "raw": "bot-brother",
        "scope": null,
        "escapedName": "bot-brother",
        "name": "bot-brother",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/cashalot/onebytecode/oneBytebot"
    ]
  ],
  "_from": "bot-brother@latest",
  "_id": "bot-brother@2.1.5",
  "_inCache": true,
  "_location": "/bot-brother",
  "_nodeVersion": "5.12.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/bot-brother-2.1.5.tgz_1475957035830_0.36442656721919775"
  },
  "_npmUser": {
    "name": "serjopepper",
    "email": "serjopepper@gmail.com"
  },
  "_npmVersion": "3.8.6",
  "_phantomChildren": {
    "bl": "1.2.1",
    "debug": "2.6.6",
    "file-type": "3.9.0",
    "mime": "1.3.6",
    "pump": "1.0.2",
    "request": "2.81.0"
  },
  "_requested": {
    "raw": "bot-brother",
    "scope": null,
    "escapedName": "bot-brother",
    "name": "bot-brother",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/bot-brother/-/bot-brother-2.1.5.tgz",
  "_shasum": "83f716d97d456b1103ac375999de39bbd9768868",
  "_shrinkwrap": null,
  "_spec": "bot-brother",
  "_where": "/home/cashalot/onebytecode/oneBytebot",
  "author": {
    "name": "Sergey Pereskokov serjopepper@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/SerjoPepper/bot-brother/issues"
  },
  "dependencies": {
    "bluebird": "^2.9.34",
    "botanio": "0.0.6",
    "co": "^4.6.0",
    "dot-object": "^1.1.0",
    "ejs": "^2.3.3",
    "lodash": "^3.10.1",
    "mkdirp": "^0.5.1",
    "node-emoji": "^1.0.3",
    "node-telegram-bot-api": "^0.23.3",
    "redis": "^2.6.1",
    "underscore.string": "^3.1.1"
  },
  "description": "Framework for creation telegram bots",
  "devDependencies": {
    "coffeelint": "^1.10.1",
    "grunt": "^0.4.5",
    "grunt-coffeelint": "0.0.13",
    "grunt-contrib-coffee": "^0.13.0"
  },
  "directories": {
    "example": "examples"
  },
  "dist": {
    "shasum": "83f716d97d456b1103ac375999de39bbd9768868",
    "tarball": "https://registry.npmjs.org/bot-brother/-/bot-brother-2.1.5.tgz"
  },
  "gitHead": "2235f629fda61b7f2877d0b5edca006e66a104c2",
  "homepage": "https://github.com/SerjoPepper/bot-brother#readme",
  "keywords": [
    "telegram",
    "bot",
    "telegram-bot",
    "framework"
  ],
  "license": "ISC",
  "main": "index.js",
  "maintainers": [
    {
      "name": "serjopepper",
      "email": "serjopepper@gmail.com"
    }
  ],
  "name": "bot-brother",
  "optionalDependencies": {},
  "readme": "# Bot-brother\nNode.js library to help you easy create telegram bots. Works on top of [node-telegram-bot-api](https://github.com/yagop/node-telegram-bot-api)\n*Supports telegram-api 2.0 inline keyboards* \n\nMain features:\n  - sessions\n  - middlewares\n  - localization\n  - templated keyboards and messages\n  - navigation between commands\n  - inline keyboards\n\nThis bots work on top of **bot-brother**:\n[@weatherman_bot](https://telegram.me/weatherman_bot)\n[@zodiac_bot](https://telegram.me/zodiac_bot)\n[@my_ali_bot](https://telegram.me/my_ali_bot)\n[@delorean_bot](https://telegram.me/delorean_bot)\n[@matchmaker_bot](https://telegram.me/matchmaker_bot)\n\n## Table of contents\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Install](#install)\n- [Simple usage](#simple-usage)\n- [Examples of usage](#examples-of-usage)\n- [Commands](#commands)\n- [Middlewares](#middlewares)\n  - [Predefined middlewares](#predefined-middlewares)\n- [Sessions](#sessions)\n  - [Redis storage](#redis-storage)\n  - [With custom Redis-client](#with-custom-redis-client)\n  - [Memory storage](#memory-storage)\n  - [Your custom storage](#your-custom-storage)\n- [Localization and texts](#localization-and-texts)\n- [Keyboards](#keyboards)\n  - [Going to command](#going-to-command)\n  - [isShown flag](#isshown-flag)\n  - [Localization in keyboards](#localization-in-keyboards)\n  - [Keyboard templates](#keyboard-templates)\n  - [Keyboard answers](#keyboard-answers)\n  - [Inline 2.0 keyboards](#inline-20-keyboards)\n- [Api](#api)\n  - [Bot](#bot)\n    - [bot.api](#botapi)\n    - [bot.command](#botcommand)\n    - [bot.keyboard](#botkeyboard)\n    - [bot.texts](#bottexts)\n    - [Using webHook](#using-webhook)\n  - [Command](#command)\n  - [Context](#context)\n  - [Context properties](#context-properties)\n    - [context.session](#contextsession)\n    - [context.data](#contextdata)\n    - [context.meta](#contextmeta)\n    - [context.command](#contextcommand)\n    - [context.answer](#contextanswer)\n    - [context.message](#contextmessage)\n    - [context.bot](#contextbot)\n    - [context.isRedirected](#contextisredirected)\n    - [context.isSynthetic](#contextissynthetic)\n  - [Context methods](#context-methods)\n    - [context.keyboard(keyboardDefinition)](#contextkeyboardkeyboarddefinition)\n    - [context.hideKeyboard()](#contexthidekeyboard)\n    - [context.inlineKeyboard(keyboardDefinition)](#contextinlinekeyboardkeyboarddefinition)\n    - [context.render(key, data)](#contextrenderkey-data)\n    - [context.go()](#contextgo)\n    - [context.goParent()](#contextgoparent)\n    - [context.goBack()](#contextgoback)\n    - [context.repeat()](#contextrepeat)\n    - [context.end()](#contextend)\n    - [context.setLocale(locale)](#contextsetlocalelocale)\n    - [context.getLocale()](#contextgetlocale)\n  - [context.sendMessage(text, [options])](#contextsendmessagetext-options)\n    - [context.forwardMessage(fromChatId, messageId)](#contextforwardmessagefromchatid-messageid)\n  - [context.sendPhoto(photo, [options])](#contextsendphotophoto-options)\n  - [context.sendAudio(audio, [options])](#contextsendaudioaudio-options)\n  - [context.sendDocument(A, [options])](#contextsenddocumenta-options)\n  - [context.sendSticker(A, [options])](#contextsendstickera-options)\n  - [context.sendVideo(A, [options])](#contextsendvideoa-options)\n  - [context.sendVoice(voice, [options])](#contextsendvoicevoice-options)\n  - [context.sendChatAction(action)](#contextsendchatactionaction)\n  - [context.getUserProfilePhotos([offset], [limit])](#contextgetuserprofilephotosoffset-limit)\n  - [context.sendLocation(latitude, longitude, [options])](#contextsendlocationlatitude-longitude-options)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Install\n```sh\nnpm install bot-brother\n```\n\n## Simple usage\n```js\nvar bb = require('bot-brother');\nvar bot = bb({\n  key: '<_TELEGRAM_BOT_TOKEN>',\n  sessionManager: bb.sessionManager.memory(),\n  polling: { interval: 0, timeout: 1 }\n});\n\n// Let's create command '/start'.\nbot.command('start')\n.invoke(function (ctx) {\n  // Setting data, data is used in text message templates.\n  ctx.data.user = ctx.meta.user;\n  // Invoke callback must return promise.\n  return ctx.sendMessage('Hello <%=user.first_name%>. How are you?');\n})\n.answer(function (ctx) {\n  ctx.data.answer = ctx.answer;\n  // Returns promise.\n  return ctx.sendMessage('OK. I understood. You feel <%=answer%>');\n});\n\n// Creating command '/upload_photo'.\nbot.command('upload_photo')\n.invoke(function (ctx) {\n  return ctx.sendMessage('Drop me a photo, please');\n})\n.answer(function (ctx) {\n  // ctx.message is an object that represents Message.\n  // See https://core.telegram.org/bots/api#message \n  return ctx.sendPhoto(ctx.message.photo[0].file_id, {caption: 'I got your photo!'});\n});\n```\n\n## Examples of usage\nWe've written simple notification bot with `bot-brother`, so you can inspect code here: https://github.com/SerjoPepper/delorean_bot\n<br>\nYou can try bot in action here:\nhttps://telegram.me/delorean_bot\n\n## Commands\nCommands can be set with strings or regexps.\n```js\nbot.command(/^page[0-9]+/).invoke(function (ctx) {\n  return ctx.sendMessage('Invoked on any page')\n});\n\nbot.command('page1').invoke(function (ctx) {\n  return ctx.sendMessage('Invoked only on page1');\n});\n\nbot.command('page2').invoke(function (ctx) {\n  return ctx.sendMessage('Invoked only on page2');\n});\n```\n\n\n## Middlewares\nMiddlewares are useful for multistage command handling.\n```js\nvar bb = require('bot-brother');\nvar bot = bb({\n  key: '<_TELEGRAM_BOT_TOKEN>'\n})\n\nbot.use('before', function (ctx) {\n  return findUserFromDbPromise(ctx.meta.user.id).then(function (user) {\n    user.vehicle = user.vehicle || 'Car'\n    // You can set any fieldname except following:\n    // 1. You can't create fields starting with '_', like ctx._variable;\n    // 2. 'bot', 'session', 'message', 'isRedirected', 'isSynthetic', 'command', 'isEnded', 'meta' are reserved names.\n    ctx.user = user;\n  });\n});\n\nbot.command('my_command')\n.use('before', function (ctx) {\n  ctx.user.age = ctx.user.age || '25';\n})\n.invoke(function (ctx) {\n  ctx.data.user = ctx.user;\n  return ctx.sendMessage('Your vehicle is <%=user.vehicle%>. Your age is <%=user.age%>.');\n});\n```\nThere are following stages, sorted in order of appearance.\n\n| Name         | Description                    |\n| ------------ | ------------------------------ |\n| before       | applied before all stages      |\n| beforeInvoke | applied before invoke stage    |\n| beforeAnswer | applied before answer stage    |\n| invoke       | same as `command.invoke(...)`  |\n| answer       | same as `command.answer(...)`  |\n\nLet's look at following example, and try to understand how and in what order they will be invoked.\n```js\nbot.use('before', function (ctx) {\n  return ctx.sendMessage('bot before');\n})\n.use('beforeInvoke', function (ctx) {\n  return ctx.sendMessage('bot beforeInvoke');\n})\n.use('beforeAnswer', function (ctx) {\n  return ctx.sendMessage('bot beforeAnswer');\n});\n\n// This callback cathes all commands.\nbot.command(/.*/).use('before', function (ctx) {\n  return ctx.sendMessage('rgx before');\n})\n.use('beforeInvoke', function (ctx) {\n  return ctx.sendMessage('rgx beforeInvoke');\n})\n.use('beforeAnswer', function (ctx) {\n  return ctx.sendMessage('rgx beforeAnswer');\n});\n\nbot.command('hello')\n.use('before', function (ctx) {\n  return ctx.sendMessage('hello before');\n})\n.use('beforeInvoke', function (ctx) {\n  return ctx.sendMessage('hello beforeInvoke');\n})\n.use('beforeAnswer', function (ctx) {\n  return ctx.sendMessage('hello beforeAnswer');\n})\n.invoke(function (ctx) {\n  return ctx.sendMessage('hello invoke');\n})\n.answer(function (ctx) {\n  return ctx.go('world');\n});\n\nbot.command('world')\n.use('before', function (ctx) {\n  return ctx.sendMessage('world before');\n})\n.invoke(function (ctx) {\n  return ctx.sendMessage('world invoke');\n});\n```\n\nBot dialog\n```\nme  > /hello\nbot > bot before\nbot > bot beforeInvoke\nbot > rgx before\nbot > rgx beforeInvoke\nbot > hello before\nbot > hello beforeInvoke\nbot > hello invoke\nme  > I type something\nbot > bot before\nbot > bot beforeAnswer\nbot > rgx before\nbot > rgx beforeAnswer\nbot > hello beforeAnswer\nbot > bot before // We've jumped to \"world\" command with \"ctx.go('world')\"\"\nbot > bot beforeInvoke\nbot > rgx before\nbot > rgx beforeInvoke\nbot > world before\nbot > world invoke \n```\n\n### Predefined middlewares\nThere are two predefined middlewares:\n - `botanio` - tracks each incoming message. See http://botan.io/\n - `typing` - shows typing status before each message. See https://core.telegram.org/bots/api#sendchataction\n\nUsage:\n```js\nbot.use('before', bb.middlewares.typing());\nbot.use('before', bb.middlewares.botanio('<BOTANIO_API_KEY>'));\n```\n\n\n## Sessions\nSessions can be implemented with Redis, with memory/fs storage or your custom storage\n```js\nbot.command('memory')\n.invoke(function (ctx) {\n  return ctx.sendMessage('Type some string');\n})\n.answer(function (ctx) {\n  ctx.session.memory = ctx.session.memory || '';\n  ctx.session.memory += ctx.answer;\n  ctx.data.memory = ctx.session.memory;\n  return ctx.sendMessage('Memory: <%=memory%>');\n})\n```\n\nThis dialog demonstrates how it works:\n```\nme  > /memory\nbot > Type some string\nme  > 1\nbot > 1\nme  > 2\nbot > 12\nme  > hello\nbot > 12hello\n```\n\n### Redis storage\n```\nvar bb = require('bot-brother')\nbot = bb({\n  key: '<_TELEGRAM_BOT_TOKEN>',\n  sessionManager: bb.sessionManager.redis({port: '...', host: '...'}),\n  polling: { interval: 0, timeout: 1 }\n})\n```\n### With custom Redis-client\n```\nvar bb = require('bot-brother')\nbot = bb({\n  key: '<_TELEGRAM_BOT_TOKEN>',\n  sessionManager: bb.sessionManager.redis({client: yourCustomRedisConnection}),\n  polling: { interval: 0, timeout: 1 }\n})\n```\n### Memory storage\n```\nvar bb = require('bot-brother')\nbot = bb({\n  key: '<_TELEGRAM_BOT_TOKEN>',\n  // set the path where your session will be saved. You can skip this option\n  sessionManager: bb.sessionManager.memory({dir: '/path/to/dir'}), \n  polling: { interval: 0, timeout: 1 }\n})\n```\n### Your custom storage\n```\nvar bb = require('bot-brother')\nbot = bb({\n  key: '<_TELEGRAM_BOT_TOKEN>',\n  // set the path where your session will be saved. You can skip this option\n  sessionManager: function (bot) {\n    return bb.sessionManager.create({\n      save: function (id, session) {\n        // save session\n        // should return promise\n        return Promise.resolve(true)\n      },\n      get: function(id) {\n        // get session by key\n        // should return promise with {Object}\n        return fetchYourSessionAsync(id)\n      },\n      getMultiple: function(ids) {\n        // optionally method\n        // define it if you use expression: bot.withContexts(ids)\n        // should return promise with array of session objects\n      },\n      getAll: function() {\n        // optionally method, same as 'getMultiple'\n        // define it if you use bot.withAllContexts\n      }\n    })\n  }, \n  polling: { interval: 0, timeout: 1 }\n})\n```\n\n\n## Localization and texts\nLocalization can be used in texts and keyboards.\nFor templates we use [ejs](https://github.com/tj/ejs).\n```js\n// Setting keys and values for locale 'en'.\nbot.texts({\n  book: {\n    chapter1: {\n      page1: 'Hello <%=user.first_name%> :smile:'\n    },\n    chapter2: {\n      page3: 'How old are you, <%=user.first_name%>?'\n    }\n  }\n}, {locale: 'en'})\n\n// Setting default localization values (used if key in certain locale did not found).\nbot.texts({\n  book: {\n    chapter1: {\n      page2: 'How are you, <%=user.first_name%>?'\n    },\n    chapter2: {\n      page4: 'Good bye, <%=user.first_name%>.'\n    }\n  }\n})\n\nbot.use('before', function (ctx) {\n  // Let's set data.user to Telegram user to use value in message templates.\n  ctx.data.user = ctx.meta.user\n  ctx.session.locale = ctx.session.locale || 'en';\n  ctx.setLocale(ctx.session.locale);\n});\n\nbot.command('chapter1_page1').invoke(function (ctx) {\n  ctx.sendMessage('book.chapter1.page1')\n})\nbot.command('chapter1_page2').invoke(function (ctx) {\n  ctx.sendMessage('book.chapter1.page2')\n})\nbot.command('chapter2_page3').invoke(function (ctx) {\n  ctx.sendMessage('book.chapter2.page3')\n})\nbot.command('chapter2_page4').invoke(function (ctx) {\n  ctx.sendMessage('book.chapter2.page4')\n})\n```\nWhen bot-brother sends a message, it tries to interpret this message as a key from your localization set. If key's not found, it interprets the message as a template with variables and renders it via ejs.\nAll local variables can be set via `ctx.data`.\n\nTexts can be set for following entities:\n  - bot\n  - command\n  - context\n\n```js\nbot.texts({\n  book: {\n    chapter: {\n      page: 'Page 1 text'\n    }\n  }\n});\n\nbot.command('page1').invoke(function (ctx) {\n  return ctx.sendMessage('book.chapter.page');\n});\n\nbot.command('page2').invoke(function (ctx) {\n  return ctx.sendMessage('book.chapter.page');\n})\n.texts({\n  book: {\n    chapter: {\n      page: 'Page 2 text'\n    }\n  }\n});\n\nbot.command('page3')\n.use('before', function (ctx) {\n  ctx.texts({\n    book: {\n      chapter: {\n        page: 'Page 3 text'\n      }\n    }\n  });\n})\n.invoke(function (ctx) {\n  return ctx.sendMessage('book.chapter.page');\n})\n```\n\nBot dialog:\n\n```\nme  > /page1\nbot > Page 1 text\nme  > /page2\nbot > Page 2 text\nme  > /page3\nbot > Page 3 text\n```\n\n\n## Keyboards\nYou can set keyboard for context, command or bot.\n```js\n// This keyboard is applied for any command.\n// Also you can use emoji in keyboard.\nbot.keyboard([\n  [{':one: go page 1': {go: 'page1'}}],\n  [{':two: go page 2': {go: 'page2'}}],\n  [{':three: go page 3': {go: 'page3'}}]\n])\n\nbot.command('page1').invoke(function (ctx) {\n  return ctx.sendMessage('This is page 1')\n})\n\nbot.command('page2').invoke(function (ctx) {\n  return ctx.sendMessage('This is page 2')\n}).keyboard([\n  [{':one: go page 1': {go: 'page1'}}],\n  [{':three: go page 3': {go: 'page3'}}]\n])\n\nbot.command('page3').invoke(function (ctx) {\n  ctx.keyboard([\n    [{':one: go page 1': {go: 'page1'}}]\n    [{':two: go page 2': {go: 'page2'}}]\n  ])\n})\n```\n\n### Going to command\nYou can go to any command via keyboard. First argument for `go` method is a command name.\n```\nbot.keyboard([[\n  {'command1': {go: 'command1'}}\n]])\n\n```\n\n\n### isShown flag\n`isShown` flag can be used to hide keyboard buttons in certain moment.\n\n```\nbot.use('before', function (ctx) {\n  ctx.isButtonShown = Math.round() > 0.5;\n}).keyboard([[\n  {\n    'text1': {\n      go: 'command1',\n      isShown: function (ctx) {\n        return ctx.isButtonShown;\n      }\n    }\n  }\n]]);\n```\n\n### Localization in keyboards\n```js\nbot.texts({\n  menu: {\n    item1: ':one: page 1'\n    item2: ':two: page 2'\n  }\n}).keyboard([\n  [{'menu.item1': {go: 'page1'}}]\n  [{'menu.item2': {go: 'page2'}}]\n])\n```\n\n### Keyboard templates\nYou can use keyboard templates\n```js\nbot.keyboard('footer', [{':arrow_backward:': {go: 'start'}}])\n\nbot.command('start', function (ctx) {\n  ctx.sendMessage('Hello there')\n}).keyboard([\n  [{'Page 1': {go: 'page1'}}],\n  [{'Page 2': {go: 'page2'}}]\n])\n\nbot.command('page1', function () {\n  ctx.sendMessage('This is page 1')\n})\n.keyboard([\n  [{'Page 2': {go: 'page2'}}],\n  'footer'\n])\n\nbot.command('page2', function () {\n  ctx.sendMessage('This is page 1')\n})\n.keyboard([\n  [{'Page 1': {go: 'page1'}}],\n  'footer'\n])\n```\n\n### Keyboard answers\nIf you want to handle a text answer from your keyboard, use following code:\n```js\nbot.command('command1')\n.invoke(function (ctx) {\n  return ctx.sendMessage('Hello')\n})\n.keyboard([\n  [{'answer1': 'answer1'}],\n  [{'answer2': {value: 'answer2'}}],\n  [{'answer3': 3}],\n  [{'answer4': {value: 4}}]\n])\n.answer(function (ctx) {\n  ctx.data.answer = ctx.answer;\n  return ctx.sendMessage('Your answer is <%=answer%>');\n});\n```\n\nSometimes you want user to manually enter an answer. Use following code to do this:\n```js\n// Use 'compliantKeyboard' flag.\nbot.command('command1', {compliantKeyboard: true})\n.use('before', function (ctx) {\n  ctx.keyboard([\n    [{'answer1': 1}],\n    [{'answer2': 2}],\n    [{'answer3': 3}],\n    [{'answer4': 4}]\n  ]);\n})\n.invoke(function (ctx) {\n  return ctx.sendMessage('Answer me!')\n})\n.answer(function (ctx) {\n  if (typeof ctx.answer === 'number') {\n    return ctx.sendMessage('This is an answer from keyboard')\n  } else {\n    return ctx.sendMessage('This is not an answer from keyboard. Your answer is: ' + ctx.answer)\n  }\n});\n```\n\n### Inline 2.0 keyboards\nYou can use inline keyboards in the same way as default keyboards\n```js\nbot.bommand('inline_example')\n.answer(function (ctx) {\n  ctx.sendMessage('Inline data example')\n})\n.callback(function (ctx) {\n  ctx.updateText('Callback data: ' + ctx.callbackData.myVar)\n})\n// set any your data to callbackData.\n// IMPORTANT! Try to fit your data in 60 chars, because Telegram has limit for inline buttons \n.inlineKeyboard([[\n  {'Option 1': {callbackData: {myVar: 1}, isShown: function (ctx) { return ctx.callbackData.myVar != 1 }}},\n  {'Option 2': {callbackData: {myVar: 2}, isShown: function (ctx) { return ctx.callbackData.myVar != 2 }}},\n  // use syntax:\n  // 'callback${{CALLBACK_COMMAND}}' (or 'cb${{CALLBACK_COMMAND}}') \n  // 'invoke${{INVOKE_COMMAND}}'\n  // to go to another command\n  {'Option 3': {go: 'cb$go_inline_example'}},\n  {'Option 4': {go: 'invoke$go_inline_example'}}\n]])\n\nbot.command('go_inline_example')\n.invoke(function (ctx) {\n  ctx.sendMessage('This command invoked directly')\n})\n.callback(function (ctx) {\n  ctx.updateText('Command invoked via callback! type /inline_example to start again')\n})\n```\n\n## Api\nThere are three base classes:\n  - Bot\n  - Command\n  - Context\n\n### Bot\nBot represents a bot.\n```\nvar bb = require('bot-brother');\nvar bot = bb({\n  key: '<TELEGRAM_BOT_TOKEN>',\n  // optional\n  webHook: {\n    url: 'https://mybot.com/updates',\n    key: '<PEM_PRIVATE_KEY>',\n    cert: '<PEM_PUBLIC_KEY>',\n    port: 443,\n    https: true\n  }\n})\n```\n\nHas following methods and fields:\n\n#### bot.api\nbot.api is an instance of [node-telegram-bot-api](https://github.com/yagop/node-telegram-bot-api)\n```js\nbot.api.sendMessage(chatId, 'message');\n```\n\n#### bot.command\nCreates a command.\n```js\nbot.command('start').invoke(function (ctx) {\n  ctx.sendMessage('Hello')\n});\n```\n\n#### bot.keyboard\n```js\nbot.keyboard([\n  [{column1: 'value1'}]\n  [{column2: {go: 'command1'}}]\n])\n```\n\n\n#### bot.texts\nDefined texts can be used in keyboards, messages, photo captions\n```js\nbot.texts({\n  key1: {\n    embeddedKey2: 'Hello'\n  }\n})\n\n// With localization.\nbot.texts({\n  key1: {\n    embeddedKey2: 'Hello2'\n  }\n}, {locale: 'en'})\n```\n\n\n#### Using webHook\nWebhook in telegram documentation: https://core.telegram.org/bots/api#setwebhook\nIf your node.js process is running behind the proxy (nginx for example) use following code.\nWe omit `webHook.key` parameter and run node.js on 3000 unsecure port.\n```js\nvar bb = require('bot-brother');\nvar bot = bb({\n  key: '<TELEGRAM_BOT_TOKEN>',\n  webHook: {\n    // Your nginx should proxy this to 127.0.0.1:3000\n    url: 'https://mybot.com/updates',\n    cert: '<PEM_PUBLIC_KEY>',\n    port: 3000,\n    https: false\n  }\n})\n```\n\nOtherwise if your node.js server is available outside, use following code:\n```js\nvar bb = require('bot-brother');\nvar bot = bb({\n  key: '<TELEGRAM_BOT_TOKEN>',\n  webHook: {\n    url: 'https://mybot.com/updates',\n    cert: '<PEM_PUBLIC_KEY>',\n    key: '<PEM_PRIVATE_KEY>',\n    port: 443\n  }\n})\n```\n\n### Command\n```js\nbot.command('command1')\n.invoke(function (ctx) {})\n.answer(function (ctx) {})\n.keyboard([[]])\n.texts([[]])\n```\n\n### Context\nThe context is the essence that runs through all middlewares. You can put some data in the context and use this data in the next handler. Context is passed as the first argument in all middleware handlers.\n```js\n// this is handler is invoke\nbot.use('before', function (ctx) {\n  // 'ctx' is an instance of Context\n  ctx.someProperty = 'hello';\n});\n\nbot.command('mycommand').invoke(function (ctx) {\n  // You can use data from previous stage!\n  ctx.someProperty === 'hello'; // true\n});\n```\n\nYou can put any property to context variable. But! You must observe the following rules:\n  1. Property name can not start with an underscore. `ctx._myVar` - bad!, `ctx.myVar` - good.\n  2. Names of properties should not overlap predefined properties or methods. `ctx.session = 'Hello'` - bad! `ctx.mySession = 'Hello'` - good.\n\n\n### Context properties\nContext has following predefined properties available for reading. Some of them are available for editing. Let's take a look at them:\n#### context.session\nYou can put any data in context.session. This data will be available in commands and middlewares invoked for the same user.\nImportant! Currently for group chats session data is shared between all users in chat.\n\n```js\nbot.command('hello').invoke(function (ctx) {\n  return ctx.sendMessage('Hello! What is your name?');\n}).answer(function (ctx) {\n  // Sets user answer to session.name.\n  ctx.session.name = ctx.answer;\n  return ctx.sendMessage('OK! I got it.')\n});\n\nbot.command('bye').invoke(function (ctx) {\n  return ctx.sendMessage('Bye ' + ctx.session.name);\n});\n```\n\nThis is how it works:\n```\nme  > /hello\nbot > Hello! What is your name?\nme  > John\nbot > OK! I remembered it.\nme  > /bye\nbot > Bye John\n```\n\n#### context.data\nThis variable works when rendering message texts. For template rendering we use (ejs)[https://github.com/tj/ejs]. All the data you put in context.data is available in the templates.\n```\nbot.texts({\n  hello: {\n    world: {\n      friend: 'Hello world, <%=name%>!'\n    }\n  }\n});\n\nbot.command('hello').invoke(function (ctx) {\n  ctx.data.name = 'John';\n  ctx.sendMessage('hello.world.friend');\n});\n```\n\nThis is how it works:\n```\nme  > /hello\nbot > Hello world, John!\n```\n\nThere is predefined method `render` in context.data. It can be used for rendering embedded keys:\n```\nbot.texts({\n  hello: {\n    world: {\n      friend: 'Hello world, <%=name%>!',\n      bye: 'Good bye, <%=name%>',\n      message: '<%=render(\"hello.world.friend\")%> <%=render(\"hello.world.bye\")%>'\n    }\n  }\n});\n\nbot.command('hello').invoke(function (ctx) {\n  ctx.data.name = 'John';\n  ctx.sendMessage('hello.world.message');\n});\n```\n\nBot dialog:\n```\nme  > /hello\nbot > Hello world, John! Good bye, John\n```\n\n\n#### context.meta\ncontext.meta contains following fields:\n  - `user` - see https://core.telegram.org/bots/api#user\n  - `chat` - see https://core.telegram.org/bots/api#chat\n  - `sessionId` - key name for saving session, currently it is `meta.chat.id`. So for group chats your session data is shared between all users in chat.\n\n#### context.command\nRepresents currently handled command. Has following properties:\n - `name` - the name of a command\n - `args` - arguments for a command\n - `type` - Can be `invoke` or `answer`. If handler is invoked with `.withContext` method, type is `synthetic`\n\nSuppose that we have the following code:\n```js\nbot.command('hello')\n.invoke(function (ctx) {\n  var args = ctx.command.args.join('-');\n  var type = ctx.command.type;\n  var name = ctx.command.name;\n  return ctx.sendMessage('Type '+type+'; Name: '+name+'; Arguments: '+args);\n})\n.answer(function (ctx) {\n  var type = ctx.command.type;\n  var name = ctx.command.name;\n  var answer = ctx.answer;\n  ctx.sendMessage('Type '+type+'; Name: '+name+'; Answer: ' + answer)\n});\n```\n\nThe result is the following dialogue:\n```\nme  > /hello world dear friend\nbot > Type: invoke; Name: hello; Arguments: world-dear-friend\nme  > bye\nbot > Type: answer; Name: hello; Answer: bye\n```\n\nAlso you can pass args in this way\n```\nme  > /hello__world\nbot > Type: invoke; Name: hello; Arguments: world\nme  > bye\nbot > Type: answer; Name: hello; Answer: bye\n```\n\n#### context.answer\nThis is an answer for a command. Context.answer is defined only when user answers with a text message.\n\n#### context.message\nRepresents message object. For more details see: https://core.telegram.org/bots/api#message\n\n#### context.bot\nBot instance\n\n#### context.isRedirected\nBoolean. This flag is set to 'true' when a command was achieved via `go` method (user did not type text `/command` in bot).\nLet's look at the following example:\n```js\nbot.command('hello').invoke(function (ctx) {\n  return ctx.sendMessage('Type something.')\n})\n.answer(function (ctx) {\n  return ctx.go('world');\n});\n\nbot.command('world').invoke(function (ctx) {\n  return ctx.sendMessage('isRedirected: ' + ctx.isRedirected);\n});\n```\nUser was typing something like this:\n```\nme  > /hello\nbot > Type something\nme  > lol\nbot > isRedirected: true\n```\n\n#### context.isSynthetic\nBoolean. This flag is true when we achieve the handler with `.withContext` method.\n```js\nbot.use('before', function (ctx) {\n  return ctx.sendMessage('isSynthetic before: ' + ctx.isSynthetic);\n});\n\nbot.command('withcontext', function (ctx) {\n  return ctx.sendMessage('hello').then(function () {\n    return bot.withContext(ctx.meta.sessionId, function (ctx) {\n      return ctx.sendMessage('isSynthetic in handler: ' + ctx.isSynthetic);\n    });\n  });\n})\n```\n\nDialog with bot:\n```\nme  > /withcontext\nbot > isSynthetic before: false\nbot > hello\nbot > isSynthetic before: true\nbot > isSynthetic in handler: true\n```\n\n\n### Context methods\nContext has the following methods.\n\n#### context.keyboard(keyboardDefinition)\nSets keyboard\n```js\nctx.keyboard([[{'command 1': {go: 'command1'}}]])\n```\n\n#### context.hideKeyboard()\n```js\nctx.hideKeyboard()\n```\n\n#### context.inlineKeyboard(keyboardDefinition)\nSets keyboard\n```js\nctx.keyboard([[{'command 1': {callbackData: {myVar: 2}}}]])\n```\n\n\n#### context.render(key, data)\nReturns rendered text or key\n```js\nctx.texts({\n  localization: {\n    key: {\n      name: 'Hi, <%=name%> <%=secondName%>'\n    }\n  }\n})\nctx.data.name = 'John';\nvar str = ctx.render('localization.key.name', {secondName: 'Doe'});\nconsole.log(str); // outputs 'Hi, John Doe'\n```\n\n#### context.go()\nReturns <code>Promise</code>\nGoes to some command\n```js\nvar command1 = bot.command('command1')\nvar command2 = bot.command('command2').invoke(function (ctx) {\n  // Go to command1.\n  return ctx.go('command1');\n})\n```\n\n#### context.goParent()\nReturns <code>Promise</code>\nGoes to the parent command. A command is considered a descendant if its name begins with the parent command name, for example `setting` is a parent command, `settings_locale` is a descendant command.\n```js\nvar command1 = bot.command('command1')\nvar command1Child = bot.command('command1_child').invoke(function (ctx) {\n  return ctx.goParent(); // Goes to command1.\n});\n```\n\n#### context.goBack()\nReturns <code>Promise</code>\nGoes to previously invoked command.\nUseful in keyboard 'Back' button.\n```js\nbot.command('hello')\n.answer(function (context) {\n  return context.goBack()\n})\n// or\nbot.keyboard([[\n  {'Back': {go: '$back'}}\n]])\n```\n\n#### context.repeat()\nReturns <code>Promise</code>\nRepeats current state, useful for handling wrong answers.\n```js\nbot.command('command1')\n.invoke(function (ctx) {\n  return ctx.sendMessage('How old are you?')\n})\n.answer(function (ctx) {\n  if (isNaN(ctx.answer)) {\n    return ctx.repeat(); // Sends 'How old are your?', calls 'invoke' handler.\n  }\n});\n```\n\n#### context.end()\nStops middlewares chain.\n\n#### context.setLocale(locale)\nSets locale for the context. Use it if you need localization.\n```js\nbot.texts({\n  greeting: 'Hello <%=name%>!'\n})\nbot.use('before', function (ctx) {\n  ctx.setLocale('en');\n});\n```\n\n#### context.getLocale()\nReturns current locale\n\n### context.sendMessage(text, [options])\nReturns <code>Promise</code>\nSends text message.\n\n**See**: https://core.telegram.org/bots/api#sendmessage\n\n| Param | Type | Description |\n| --- | --- | --- |\n| text | <code>String</code> | Text or localization key to be sent |\n| [options] | <code>Object</code> | Additional Telegram query options |\n\n#### context.forwardMessage(fromChatId, messageId)\nReturns <code>Promise</code>\nForwards messages of any kind.\n\n| Param | Type | Description |\n| --- | --- | --- |\n| fromChatId | <code>Number</code> &#124; <code>String</code> | Unique identifier for the chat where the original message was sent |\n| messageId | <code>Number</code> &#124; <code>String</code> | Unique message identifier |\n\n### context.sendPhoto(photo, [options])\nReturns <code>Promise</code>\nSends photo\n\n**See**: https://core.telegram.org/bots/api#sendphoto\n\n| Param | Type | Description |\n| --- | --- | --- |\n| photo | <code>String</code> &#124; <code>stream.Stream</code> | A file path or a Stream. Can also be a `file_id` previously uploaded |\n| [options] | <code>Object</code> | Additional Telegram query options |\n\n### context.sendAudio(audio, [options])\nReturns <code>Promise</code>\nSends audio\n\n**See**: https://core.telegram.org/bots/api#sendaudio\n\n| Param | Type | Description |\n| --- | --- | --- |\n| audio | <code>String</code> &#124; <code>stream.Stream</code> | A file path or a Stream. Can also be a `file_id` previously uploaded. |\n| [options] | <code>Object</code> | Additional Telegram query options |\n\n### context.sendDocument(A, [options])\nReturns <code>Promise</code>\nSends Document\n\n**See**: https://core.telegram.org/bots/api#sendDocument\n\n| Param | Type | Description |\n| --- | --- | --- |\n| A | <code>String</code> &#124; <code>stream.Stream</code> | file path or a Stream. Can also be a `file_id` previously uploaded. |\n| [options] | <code>Object</code> | Additional Telegram query options |\n\n### context.sendSticker(A, [options])\nReturns <code>Promise</code>\nSends .webp stickers.\n\n**See**: https://core.telegram.org/bots/api#sendsticker\n\n| Param | Type | Description |\n| --- | --- | --- |\n| A | <code>String</code> &#124; <code>stream.Stream</code> | file path or a Stream. Can also be a `file_id` previously uploaded. |\n| [options] | <code>Object</code> | Additional Telegram query options |\n\n### context.sendVideo(A, [options])\nReturns <code>Promise</code>\nUse this method to send video files, Telegram clients support mp4 videos (other formats may be sent as Document).\n\n**See**: https://core.telegram.org/bots/api#sendvideo\n\n| Param | Type | Description |\n| --- | --- | --- |\n| A | <code>String</code> &#124; <code>stream.Stream</code> | file path or a Stream. Can also be a `file_id` previously uploaded. |\n| [options] | <code>Object</code> | Additional Telegram query options |\n\n### context.sendVoice(voice, [options])\nReturns <code>Promise</code>\nSends voice\n\n**Kind**: instance method of <code>[TelegramBot](#TelegramBot)</code>\n**See**: https://core.telegram.org/bots/api#sendvoice\n\n| Param | Type | Description |\n| --- | --- | --- |\n| voice | <code>String</code> &#124; <code>stream.Stream</code> | A file path or a Stream. Can also be a `file_id` previously uploaded. |\n| [options] | <code>Object</code> | Additional Telegram query options |\n\n### context.sendChatAction(action)\nReturns <code>Promise</code>\nSends chat action.\n`typing` for text messages,\n`upload_photo` for photos, `record_video` or `upload_video` for videos,\n`record_audio` or `upload_audio` for audio files, `upload_document` for general files,\n`find_location` for location data.\n\n**See**: https://core.telegram.org/bots/api#sendchataction\n\n| Param | Type | Description |\n| --- | --- | --- |\n| action | <code>String</code> | Type of action to broadcast. |\n\n### context.getUserProfilePhotos([offset], [limit])\nReturns <code>Promise</code>\nUse this method to get the list of profile pictures for a user.\nReturns a [UserProfilePhotos](https://core.telegram.org/bots/api#userprofilephotos) object.\n\n**See**: https://core.telegram.org/bots/api#getuserprofilephotos\n\n| Param | Type | Description |\n| --- | --- | --- |\n| [offset] | <code>Number</code> | Sequential number of the first photo to be returned. By default, all photos are returned. |\n| [limit] | <code>Number</code> | Limits the number of photos to be retrieved. Values between 1—100 are accepted. Defaults to 100. |\n\n### context.sendLocation(latitude, longitude, [options])\nReturns <code>Promise</code>\nSends location.\nUse this method to send point on the map.\n\n**See**: https://core.telegram.org/bots/api#sendlocation\n\n| Param | Type | Description |\n| --- | --- | --- |\n| latitude | <code>Float</code> | Latitude of location |\n| longitude | <code>Float</code> | Longitude of location |\n| [options] | <code>Object</code> | Additional Telegram query options |\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/SerjoPepper/bot-brother.git"
  },
  "scripts": {
    "prepublish": "grunt prepublish",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "2.1.5"
}
